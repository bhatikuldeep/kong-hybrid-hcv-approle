# Specify which Kong image to run
x-kong-image: &kong-image
  image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.6.1.7-rhel}

# Kong license configuration
x-kong-license: &kong-license
  KONG_LICENSE_DATA: ${KONG_LICENSE_DATA:?err}

# Kong database configuration
x-kong-db-config: &kong-db-config
  KONG_DATABASE: postgres
  KONG_PG_HOST: db
  KONG_PG_DATABASE: kong
  KONG_PG_USER: kong
  KONG_PG_PASSWORD: kong
  KONG_PASSWORD: password

# Common configuration for Kong containers
x-kong-container-common: &kong-container-common
  healthcheck:
    test: ["CMD", "kong", "health"]
    interval: 3s
    timeout: 3s
    retries: 10
    start_period: 3s
  restart: on-failure
  tmpfs:
    - /tmp

networks:
  kong-net:
    name: kong-net
    driver: bridge
  kong-net-internal:
    name: kong-net-internal
    driver: bridge
    internal: true

services:
  kong-migrations:
    <<: *kong-image
    networks:
      - kong-net
    command: "kong migrations bootstrap"
    environment:
      <<: [*kong-license, *kong-db-config]
    restart: on-failure

  kong-migrations-upgrade:
    <<: *kong-image
    profiles: ["upgrade", "everything"]
    networks:
      - kong-net
    command: "kong migrations up"
    environment:
      <<: [*kong-license, *kong-db-config]
    restart: on-failure

  kong-migrations-finish:
    <<: *kong-image
    profiles: ["upgrade-finish", "everything"]
    networks:
      - kong-net
    command: "kong migrations finish"
    environment:
      <<: [*kong-license, *kong-db-config]
    restart: on-failure

  kong-gateway-cp:
    <<: [*kong-container-common, *kong-image]
    deploy:
      replicas: 1
    mem_limit: 2g
    cpus: 4
    networks:
      - kong-net
      - kong-net-internal
    volumes:
      - ./certs:/data/certs
    user: "${KONG_USER:-kong}"
    ports:
      - 8001:8001
      - 8002:8002
    depends_on:
      db:
        condition: service_healthy
    environment:
      <<: [*kong-license, *kong-db-config]
      KONG_PROXY_LISTEN: "off"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_ROLE: "control_plane"
      KONG_CLUSTER_MTLS: "shared"
      KONG_CLUSTER_CERT: "/data/certs/cluster-cert.pem"
      KONG_CLUSTER_CERT_KEY: "/data/certs/cluster-key.pem"

  db:
    networks:
      - kong-net
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true

  kong-gateway-dp:
    <<: [*kong-container-common, *kong-image]
    deploy:
      replicas: 1
    mem_limit: 2g
    cpus: 4
    networks:
      - kong-net
      - kong-net-internal
    volumes:
      - ./certs:/data/certs
    user: "${KONG_USER:-kong}"
    ports:
      - 8000:8000
    depends_on:
      kong-gateway-cp:
        condition: service_healthy
    environment:
      <<: [*kong-license]
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "off"
      KONG_ADMIN_GUI_LISTEN: "off"
      KONG_ROLE: "data_plane"
      KONG_CLUSTER_MTLS: "shared"
      KONG_CLUSTER_CERT: "/data/certs/cluster-cert.pem"
      KONG_CLUSTER_CERT_KEY: "/data/certs/cluster-key.pem"
      KONG_CLUSTER_CONTROL_PLANE: "kong-gateway-cp:8005"
      KONG_CLUSTER_TELEMETRY_ENDPOINT: "kong-gateway-cp:8006"
      KONG_DATABASE: "off"

  httpbin:
    networks:
      - kong-net
      - kong-net-internal
    image: kennethreitz/httpbin
    platform: linux/x86_64
    ports:
      - "9000:80"
    container_name: httpbin
    hostname: httpbin

  deck:
    networks:
      - kong-net
    image: kong/deck:v1.34.0
    volumes:
      - ./decks:/tmp/decks:ro
    environment:
      DECK_ANALYTICS: "off"
      DECK_KONG_ADDR: "http://kong-gateway-cp:8001"
      DECK_HEADERS: "kong-admin-token:password"
    depends_on:
      kong-gateway-cp:
        condition: service_healthy
    entrypoint: >
      sh -c "/usr/local/bin/deck gateway sync /tmp/decks/*.yaml ;
      echo '***************************************************' ;
      echo '*                                                 *' ;
      echo '*       SETUP IS COMPLETE - READY TO KONG!        *' ;
      echo '*                                                 *' ;
      echo '***************************************************'"
