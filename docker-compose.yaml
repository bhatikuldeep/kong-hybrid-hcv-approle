# Specify which Kong image to run
x-kong-image: &kong-image
  image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.6.1.7-rhel}

# Kong license configuration
x-kong-license: &kong-license
  KONG_LICENSE_DATA: ${KONG_LICENSE_DATA:?err}

# Kong database configuration
x-kong-db-config: &kong-db-config
  KONG_DATABASE: postgres
  KONG_PG_HOST: db
  KONG_PG_DATABASE: kong
  KONG_PG_USER: kong
  KONG_PG_PASSWORD: kong
  KONG_PASSWORD: password

# Common configuration for Kong containers
x-kong-container-common: &kong-container-common
  healthcheck:
    test: ["CMD", "kong", "health"]
    interval: 3s
    timeout: 3s
    retries: 10
    start_period: 3s
  restart: on-failure
  tmpfs:
    - /tmp

networks:
  kong-net:
    name: kong-net
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16

services:
  kong-migrations:
    <<: *kong-image
    networks:
      - kong-net
    command: "kong migrations bootstrap"
    environment:
      <<: [*kong-license, *kong-db-config]
    restart: on-failure

  kong-migrations-upgrade:
    <<: *kong-image
    profiles: ["upgrade", "everything"]
    networks:
      - kong-net
    command: "kong migrations up"
    environment:
      <<: [*kong-license, *kong-db-config]
    restart: on-failure

  kong-migrations-finish:
    <<: *kong-image
    profiles: ["upgrade-finish", "everything"]
    networks:
      - kong-net
    command: "kong migrations finish"
    environment:
      <<: [*kong-license, *kong-db-config]
    restart: on-failure

  kong-gateway-cp:
    <<: [*kong-container-common, *kong-image]
    deploy:
      replicas: 1
    mem_limit: 2g
    cpus: 4
    networks:
      - kong-net
    volumes:
      - ./certs:/data/certs
    user: "${KONG_USER:-kong}"
    ports:
      - 8001:8001
      - 8002:8002
    depends_on:
      db:
        condition: service_healthy
    environment:
      <<: [*kong-license, *kong-db-config]
      KONG_PROXY_LISTEN: "off"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_ROLE: "control_plane"
      KONG_CLUSTER_MTLS: "shared"
      KONG_CLUSTER_CERT: "/data/certs/cluster-cert.pem"
      KONG_CLUSTER_CERT_KEY: "/data/certs/cluster-key.pem"      

  db:
    networks:
      - kong-net
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true

  kong-gateway-dp:
    <<: [*kong-container-common, *kong-image]
    deploy:
      replicas: 1
    mem_limit: 2g
    cpus: 4
    networks:
      - kong-net
    volumes:
      - ./certs:/data/certs
      - ./secrets:/usr/local/kong/secrets
      - ./approle.lua:/usr/local/share/lua/5.1/kong/vaults/hcv/approle.lua
    user: "${KONG_USER:-kong}"
    ports:
      - 8000:8000
    depends_on:
      kong-gateway-cp:
        condition: service_healthy
    environment:
      <<: [*kong-license]
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "off"
      KONG_ADMIN_GUI_LISTEN: "off"
      KONG_ROLE: "data_plane"
      KONG_CLUSTER_MTLS: "shared"
      KONG_CLUSTER_CERT: "/data/certs/cluster-cert.pem"
      KONG_CLUSTER_CERT_KEY: "/data/certs/cluster-key.pem"
      KONG_CLUSTER_CONTROL_PLANE: "kong-gateway-cp:8005"
      KONG_CLUSTER_TELEMETRY_ENDPOINT: "kong-gateway-cp:8006"
      KONG_DATABASE: "off"

      #Hashicorp Vault Approle configs
      KONG_VAULT_HCV_PROTOCOL: "http"
      KONG_VAULT_HCV_HOST: "172.18.0.10"
      KONG_VAULT_HCV_PORT: "8200"
      KONG_VAULT_HCV_MOUNT: "secret"
      KONG_VAULT_HCV_KV: "v1"
      KONG_VAULT_HCV_AUTH_METHOD: "approle"
      KONG_VAULT_HCV_APPROLE_ROLE_ID: "01d7e428-8d80-1b0f-85e4-f3a1eb77b699"
      KONG_VAULT_HCV_APPROLE_SECRET_ID_FILE: "/usr/local/kong/secrets/secret_file"

  httpbin:
    networks:
      - kong-net
    image: kennethreitz/httpbin
    platform: linux/x86_64
    ports:
      - "9000:80"
    container_name: httpbin
    hostname: httpbin

  deck:
    networks:
      - kong-net
    image: kong/deck:v1.39.4
    volumes:
      - ./decks:/tmp/decks:ro
    environment:
      DECK_ANALYTICS: "off"
      DECK_KONG_ADDR: "http://kong-gateway-cp:8001"
      DECK_HEADERS: "kong-admin-token:password"
    depends_on:
      kong-gateway-cp:
        condition: service_healthy
    entrypoint: >
      sh -c "/usr/local/bin/deck gateway sync /tmp/decks/*.yaml ;
      echo '***************************************************' ;
      echo '*                                                 *' ;
      echo '*       SETUP IS COMPLETE - READY TO KONG!        *' ;
      echo '*                                                 *' ;
      echo '***************************************************'"
  
  vault:
    image: hashicorp/vault:latest
    networks:
      kong-net:
        ipv4_address: 172.18.0.10
    container_name: vault
    ports:
      - "8200:8200"
    volumes:
      - ./hcv:/vault/config
      - ./data:/vault/file
    cap_add:
      - IPC_LOCK
    command: "vault server -config=/vault/config/vault-config.json"

  redis:
    container_name: redis-stack
    networks:
      - kong-net
    image: 'redis/redis-stack:latest'
    restart: unless-stopped
    environment:
      REDIS_ARGS: "--requirepass root --aclfile /etc/redis/users.acl"
    volumes:
      - ./redis-data:/data
      - ./redis/redis-users.acl:/etc/redis/users.acl:z # Adding ACL file for user
    ports:
      - "6379:6379" # Redis server
      - "8008:8001" # RedisInsight, changed to avoid conflict